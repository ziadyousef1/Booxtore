@model Booxtore.Presentation.ViewModels.RegisterViewModel
@{
    ViewData["Title"] = "Register";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Booxtore</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="~/css/auth-register.css" rel="stylesheet">
</head>
<body>
    <div class="floating-shapes">
        <div class="shape"></div>
        <div class="shape"></div>
        <div class="shape"></div>
        <div class="shape"></div>
        <div class="shape"></div>
    </div>

    <div class="register-container">
        <div class="logo">
            <h1><i class="fas fa-book-open"></i> Booxtore</h1>
            <p>Create your account and start your reading journey</p>
        </div>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="error-message">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <div>@error.ErrorMessage</div>
                }
            </div>
        }

        <form asp-action="Register" asp-controller="Auth" method="post" id="registerForm">
            <div class="form-row">
                <div class="form-group">
                    <i class="fas fa-user form-icon"></i>
                    <input asp-for="FirstName" class="form-control" placeholder="First Name" type="text" />
                    <span asp-validation-for="FirstName" class="field-validation-error"></span>
                </div>

                <div class="form-group">
                    <i class="fas fa-user form-icon"></i>
                    <input asp-for="LastName" class="form-control" placeholder="Last Name" type="text" />
                    <span asp-validation-for="LastName" class="field-validation-error"></span>
                </div>
            </div>

            <div class="form-group">
                <i class="fas fa-envelope form-icon"></i>
                <input asp-for="Email" class="form-control" placeholder="Email Address" type="email" />
                <span asp-validation-for="Email" class="field-validation-error"></span>
            </div>

            <div class="form-group">
                <i class="fas fa-lock form-icon"></i>
                <input asp-for="Password" class="form-control" placeholder="Password" type="password" id="password" />
                <span asp-validation-for="Password" class="field-validation-error"></span>
                <div id="passwordStrength" class="password-strength" style="display: none;">
                    <span id="strengthText"></span>
                </div>
            </div>

            <div class="form-group">
                <i class="fas fa-lock form-icon"></i>
                <input asp-for="ConfirmPassword" class="form-control" placeholder="Confirm Password" type="password" id="confirmPassword" />
                <span asp-validation-for="ConfirmPassword" class="field-validation-error"></span>
            </div>

            <button type="submit" class="btn btn-register">
                <span class="btn-text">Create Account</span>
                <div class="loading"></div>
            </button>

            <div class="links">
                <p>Already have an account? <a href="@Url.Action("Login", "Auth")">Sign in here</a></p>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById('registerForm').addEventListener('submit', function(e) {
            const btn = document.querySelector('.btn-register');
            btn.classList.add('loading');
            
            setTimeout(() => {
                btn.classList.remove('loading');
            }, 3000);
        });

        // Password strength checker
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const strengthDiv = document.getElementById('passwordStrength');
        const strengthText = document.getElementById('strengthText');

        function checkPasswordStrength(password) {
            let strength = 0;
            let feedback = [];

            if (password.length >= 8) strength++;
            else feedback.push('at least 8 characters');

            if (/[a-z]/.test(password)) strength++;
            else feedback.push('lowercase letter');

            if (/[A-Z]/.test(password)) strength++;
            else feedback.push('uppercase letter');

            if (/[0-9]/.test(password)) strength++;
            else feedback.push('number');

            if (/[^A-Za-z0-9]/.test(password)) strength++;
            else feedback.push('special character');

            return { strength, feedback };
        }

        passwordInput.addEventListener('input', function() {
            const password = this.value;
            if (password.length > 0) {
                const { strength, feedback } = checkPasswordStrength(password);
                strengthDiv.style.display = 'block';
                
                if (strength <= 2) {
                    strengthText.className = 'strength-weak';
                    strengthText.textContent = `Weak - Add: ${feedback.join(', ')}`;
                } else if (strength <= 3) {
                    strengthText.className = 'strength-medium';
                    strengthText.textContent = `Medium - Add: ${feedback.join(', ')}`;
                } else {
                    strengthText.className = 'strength-strong';
                    strengthText.textContent = 'Strong password!';
                }
            } else {
                strengthDiv.style.display = 'none';
            }
        });

        // Password match checker
        function checkPasswordMatch() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            
            if (confirmPassword.length > 0) {
                if (password !== confirmPassword) {
                    confirmPasswordInput.style.borderColor = '#e74c3c';
                } else {
                    confirmPasswordInput.style.borderColor = '#27ae60';
                }
            } else {
                confirmPasswordInput.style.borderColor = '';
            }
        }

        confirmPasswordInput.addEventListener('input', checkPasswordMatch);
        passwordInput.addEventListener('input', checkPasswordMatch);

        // Animation observer
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationDelay = '0s';
                    entry.target.style.animationPlayState = 'running';
                }
            });
        }, observerOptions);

        document.querySelectorAll('.form-group, .btn-register').forEach(el => {
            observer.observe(el);
        });
    </script>
</body>

