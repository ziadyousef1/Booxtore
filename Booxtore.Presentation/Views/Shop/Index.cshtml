@model Booxtore.Presentation.ViewModels.ShopViewModel
@{
    ViewData["Title"] = "Shop";
}

<section class="py-5">
    <div class="container">
        <div class="row">
            <div class="col-lg-3">
                <!-- Filters Sidebar -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Search</h5>
                    </div>
                    <div class="card-body">
                        <form method="get">
                            <div class="mb-3">
                                <input type="text" class="form-control" name="search" 
                                       value="@Model.SearchTerm" placeholder="Search books...">
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Search</button>
                        </form>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Categories</h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            <a href="@Url.Action("Index")" 
                               class="list-group-item list-group-item-action @(Model.SelectedCategoryId == null ? "active" : "")">
                                All Categories
                            </a>
                            @foreach (var category in Model.Categories)
                            {
                                <a href="@Url.Action("Index", new { categoryId = category.CategoryId })" 
                                   class="list-group-item list-group-item-action @(Model.SelectedCategoryId == category.CategoryId ? "active" : "")">
                                    @category.Name
                                </a>
                            }
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5>Authors</h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            <a href="@Url.Action("Index")" 
                               class="list-group-item list-group-item-action @(Model.SelectedAuthorId == null ? "active" : "")">
                                All Authors
                            </a>
                            @foreach (var author in Model.Authors.Take(10))
                            {
                                <a href="@Url.Action("Index", new { authorId = author.AuthorId })" 
                                   class="list-group-item list-group-item-action @(Model.SelectedAuthorId == author.AuthorId ? "active" : "")">
                                    @author.Name
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-9">
                <!-- Results Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h2>Our Book Collection</h2>
                        <p class="text-primary">Found @Model.TotalBooks books</p>
                    </div>
                    <div class="d-flex align-items-center">
                        <label class="me-2">Sort by:</label>
                        <select class="form-select" style="width: auto;">
                            <option>Newest</option>
                            <option>Price: Low to High</option>
                            <option>Price: High to Low</option>
                            <option>Title A-Z</option>
                        </select>
                    </div>
                </div>

                <!-- Books Grid -->
                @if (Model.Books.Any())
                {
                    <div class="row">
                        @foreach (var book in Model.Books)
                        {
                            <div class="col-md-4 col-sm-6 mb-4">
                                <div class="card h-100 position-relative border rounded-3">
                                    @if (book.IsFree == true)
                                    {
                                        <div class="position-absolute top-0 start-0 m-2">
                                            <span class="badge bg-success">Free</span>
                                        </div>
                                    }
                                    else if (book.Price > 0)
                                    {
                                        <div class="position-absolute top-0 start-0 m-2">
                                            <span class="badge bg-primary">$@book.Price</span>
                                        </div>
                                    }
                                    
                                    <img src="@(string.IsNullOrEmpty(book.CoverImageUrl) ? "/images/product-item1.png" : book.CoverImageUrl)" 
                                         class="card-img-top" alt="@book.Title" style="height: 250px; object-fit: cover;">
                                    
                                    <div class="card-body d-flex flex-column">
                                        <h6 class="card-title fw-bold">
                                            <a href="@Url.Action("Details", new { id = book.BookId })" 
                                               class="text-decoration-none text-dark">@book.Title</a>
                                        </h6>
                                        <p class="card-text text-primary small">
                                            by @(book.Author?.Name ?? "Unknown Author")
                                        </p>
                                        <p class="card-text small">
                                            Category: @(book.Category?.Name ?? "Unknown")
                                        </p>
                                        @if (!string.IsNullOrEmpty(book.Description))
                                        {
                                            <p class="card-text">
                                                @(book.Description.Length > 100 ? book.Description.Substring(0, 100) + "..." : book.Description)
                                            </p>
                                        }
                                        
                                        <div class="mt-auto">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span class="price text-primary fw-bold">
                                                    @if (book.IsFree == true)
                                                    {
                                                        <span class="fs-6">Free</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="fs-6">$@book.Price</span>
                                                    }
                                                </span>
                                            </div>
                                            <div class="d-grid gap-1">
                                                @if (book.IsFree == true)
                                                {
                                                    <!-- FREE BOOKS - Only Borrow/Read functionality -->
                                                    @if (book.IsAvailableForBorrow == true)
                                                    {
                                                        @if (book.IsBorrowedByCurrentUser)
                                                        {
                                                            <a href="@Url.Action("Read", new { id = book.BookId })" 
                                                               class="btn btn-success btn-sm py-1 px-2" style="font-size: 0.75rem;">
                                                                <i class="fas fa-book-open me-1"></i>Continue Reading
                                                            </a>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn btn-outline-primary btn-sm py-1 px-2 borrow-book-btn" 
                                                                    data-book-id="@book.BookId" style="font-size: 0.75rem;">
                                                                <i class="fas fa-book-reader me-1"></i>Borrow
                                                            </button>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <!-- PAID BOOKS - Only Purchase functionality -->
                                                    @if (book.IsAvailableForPurchase == true)
                                                    {
                                                        <div class="d-flex gap-1">
                                                            <button type="button" class="btn btn-outline-secondary btn-sm py-1 px-2 add-to-cart-btn flex-fill" 
                                                                    data-book-id="@book.BookId" style="font-size: 0.65rem;">
                                                                <i class="fas fa-shopping-cart me-1"></i>Add to Cart
                                                            </button>
                                                            <button type="button" class="btn btn-primary btn-sm py-1 px-2 buy-now-btn flex-fill" 
                                                                    data-book-id="@book.BookId" style="font-size: 0.65rem;">
                                                                <i class="fas fa-money-bill-wave me-1"></i>Buy Now
                                                            </button>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    @if (Model.TotalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                                @if (Model.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", new { 
                                            page = Model.CurrentPage - 1, 
                                            categoryId = Model.SelectedCategoryId, 
                                            authorId = Model.SelectedAuthorId, 
                                            search = Model.SearchTerm 
                                        })">Previous</a>
                                    </li>
                                }

                                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { 
                                            page = i, 
                                            categoryId = Model.SelectedCategoryId, 
                                            authorId = Model.SelectedAuthorId, 
                                            search = Model.SearchTerm 
                                        })">@i</a>
                                    </li>
                                }

                                @if (Model.CurrentPage < Model.TotalPages)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", new { 
                                            page = Model.CurrentPage + 1, 
                                            categoryId = Model.SelectedCategoryId, 
                                            authorId = Model.SelectedAuthorId, 
                                            search = Model.SearchTerm 
                                        })">Next</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <h4>No books found</h4>
                        <p>Try adjusting your search or filters.</p>
                        <a href="@Url.Action("Index")" class="btn btn-primary">View All Books</a>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@section Scripts {

    
    <!-- Toast Container for notifications -->
    <div id="toast-container" class="toast-container"></div>
    
    <script>
        // Check if books are already in cart when page loads
        $(document).ready(function() {
            $('.add-to-cart-btn').each(function() {
                var bookId = $(this).data('book-id');
                checkIfBookInCart(bookId, $(this));
            });
        });

        function checkIfBookInCart(bookId, button) {
            $.get('@Url.Action("IsBookInCart", "Cart")', { bookId: bookId })
                .done(function(response) {
                    if (response.success && response.isInCart) {
                        updateAddToCartButton(button, true);
                    }
                })
                .fail(function() {
                    // If check fails, assume not in cart
                    updateAddToCartButton(button, false);
                });
        }

        function updateAddToCartButton(button, isInCart) {
            if (isInCart) {
                button
                    .prop('disabled', true)
                    .removeClass('btn-outline-secondary')
                    .addClass('btn-success')
                    .html('<i class="fas fa-check me-1"></i>In Cart')
                    .off('click'); // Remove click handler
            } else {
                button
                    .prop('disabled', false)
                    .removeClass('btn-success')
                    .addClass('btn-outline-secondary')
                    .html('<i class="fas fa-shopping-cart me-1"></i>Add to Cart');
            }
        }

        // Add to cart functionality
        $('.add-to-cart-btn').click(function() {
            var bookId = $(this).data('book-id');
            var btn = $(this);
            
            // Disable button to prevent multiple clicks
            btn.prop('disabled', true);
            btn.html('<i class="fas fa-spinner fa-spin me-1"></i> Adding...');
            
            $.post('@Url.Action("AddToCart", "Cart")', { 
                bookId: bookId, 
                quantity: 1 
            })
            .done(function(response) {
                if (response.success) {
                    showSuccessToast(response.message, 'Added to Cart!');
                    
                    // Update button to show it's now in cart
                    updateAddToCartButton(btn, true);
                    
                    // Update cart count in navigation if exists
                    var cartCountElement = $('.cart-count');
                    if (cartCountElement.length > 0 && response.cartCount) {
                        cartCountElement.text(response.cartCount);
                        cartCountElement.show();
                    }
                } else {
                    showErrorToast(response.message, 'Error');
                    // Re-enable button on error
                    btn.prop('disabled', false);
                    btn.html('<i class="fas fa-shopping-cart me-1"></i>Add to Cart');
                }
            })
            .fail(function() {
                showErrorToast('An error occurred. Please try again.', 'Connection Error');
                // Re-enable button on error
                btn.prop('disabled', false);
                btn.html('<i class="fas fa-shopping-cart me-1"></i>Add to Cart');
            });
        });

        // Buy Now functionality - redirect directly to cart
        $('.buy-now-btn').click(function() {
            // Redirect directly to cart page
            window.location.href = '@Url.Action("Index", "Cart")';
        });

        // Borrow book functionality
        $('.borrow-book-btn').click(function() {
            var bookId = $(this).data('book-id');
            var btn = $(this);
            
            // Disable button to prevent multiple clicks
            btn.prop('disabled', true);
            btn.html('<i class="fas fa-spinner fa-spin me-1"></i> Processing...');
            
            $.post('@Url.Action("Borrow", "Shop")', { id: bookId })
                .done(function(response) {
                    if (response.success) {
                        showSuccessToast(response.message, 'Book Borrowed Successfully!');
                        
                        // Change button to "Continue Reading" after successful borrow
                        btn.removeClass('btn-outline-primary borrow-book-btn')
                           .addClass('btn-success')
                           .prop('disabled', false)
                           .off('click') // Remove borrow click handler
                           .on('click', function() {
                               // Redirect to book details page for reading
                               window.location.href = '@Url.Action("Details", "Shop")/' + bookId;
                           })
                           .html('<i class="fas fa-book-open me-1"></i>Read Now');
                        
                        // If there's a read URL for free books, offer to read now
                        if (response.readUrl) {
                            setTimeout(function() {
                                showInfoToast('You can now read this book online! <a href="' + response.readUrl + '" class="btn btn-sm btn-outline-light ms-2"><i class="fas fa-book-open me-1"></i>Read Now</a>', 'Ready to Read');
                            }, 1500);
                        }
                    } else {
                        showErrorToast(response.message, 'Borrowing Failed');
                        // Re-enable button on failure
                        btn.prop('disabled', false);
                        btn.html('<i class="fas fa-book-reader me-1"></i>Borrow');
                    }
                })
                .fail(function() {
                    showErrorToast('An error occurred. Please try again.', 'Connection Error');
                    // Re-enable button on failure
                    btn.prop('disabled', false);
                    btn.html('<i class="fas fa-book-reader me-1"></i>Borrow');
                });
        });

        // Enhanced toast notification functions
        function showSuccessToast(message, title = 'Success') {
            showToast(title, message, 'success');
        }

        function showErrorToast(message, title = 'Error') {
            showToast(title, message, 'danger');
        }

        function showInfoToast(message, title = 'Info') {
            showToast(title, message, 'info');
        }

        function showToast(title, message, type) {
            var toastId = 'toast-' + Date.now();
            var toast = $(`
                <div id="${toastId}" class="toast align-items-center text-white bg-${type} border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="5000">
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>${title}:</strong> ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `);
            
            $('#toast-container').append(toast);
            
            // Initialize and show the toast
            var bsToast = new bootstrap.Toast(toast[0]);
            bsToast.show();
            
            // Remove toast element after it's hidden
            toast.on('hidden.bs.toast', function() {
                $(this).remove();
            });
        }
    </script>
}
